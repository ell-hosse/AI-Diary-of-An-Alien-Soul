name: Process gallery images

# ---------------------------------------------------------
# 1 · Trigger only when PNG/JPG are ADDED under images/original
# ---------------------------------------------------------
on:
  push:
    branches: [main]                    # adjust if your default branch is different
    paths:
      - 'images/original/**.[Pp][Nn][Gg]'
      - 'images/original/**.[Jj][Pp][Gg]'
      - 'images/original/**.[Jj][Pp][Ee][Gg]'

jobs:
  build-gallery:
    runs-on: ubuntu-latest

    steps:
    # -----------------------------------------------------
    # 2 · Checkout entire history (fetch-depth: 0) so we can diff
    # -----------------------------------------------------
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0               # full history; needed for git diff
        token: ${{ secrets.GITHUB_TOKEN }}

    # -----------------------------------------------------
    # 3 · Set up Python and Pillow
    # -----------------------------------------------------
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Pillow
      run: pip install pillow

    # -----------------------------------------------------
    # 4 · Collect NEWLY-ADDED images in this push
    # -----------------------------------------------------
    - name: Find added images
      id: added
      shell: bash
      run: |
        set -euo pipefail

        # Diff against the previous commit on this branch
        ADDED=$(git diff --name-status ${{ github.event.before }} ${{ github.sha }} \
                   | sed 's/^A\s\+//' \
                   | grep -Ei '^images/original/.*\.(png|jpe?g)$' || true)

        echo "Added files:"
        echo "$ADDED"

        echo "added<<EOF" >> "$GITHUB_OUTPUT"
        echo "$ADDED"     >> "$GITHUB_OUTPUT"
        echo "EOF"        >> "$GITHUB_OUTPUT"

    # -----------------------------------------------------
    # 5 · Grab WHOLE commit message as the title (works for web uploads too)
    # -----------------------------------------------------
    - name: Extract title = full commit message
      id: title
      shell: bash
      run: |
        TITLE="${{ github.event.head_commit.message }}"
        # collapse newlines to single spaces so it fits as one CLI arg
        CLEAN=$(echo "$TITLE" | tr '\n' ' ' | sed 's/  */ /g')
        echo "Title: $CLEAN"
        echo "title=$CLEAN" >> "$GITHUB_OUTPUT"

    # -----------------------------------------------------
    # 6 · Run generate_resized_images.py for each new image
    # -----------------------------------------------------
    - name: Generate thumbnails & update metadata
      if: steps.added.outputs.added != ''
      shell: bash
      run: |
        set -euo pipefail
        IFS=$'\n'
        for FILE in ${{ steps.added.outputs.added }}; do
          [ -z "$FILE" ] && continue
          BASENAME=$(basename "$FILE")
          echo "▶ Processing $BASENAME"
          python generate_resized_images.py "$BASENAME" "${{ steps.title.outputs.title }}"
        done

    # -----------------------------------------------------
    # 7 · Commit thumbnails, metadata.json, README.md (cache-buster)
    # -----------------------------------------------------
    - name: Commit and push generated files
      if: steps.added.outputs.added != ''
      shell: bash
      run: |
        set -euo pipefail
        git config user.name  "github-actions"
        git config user.email "actions@github.com"

        git add images/thumbs metadata.json README.md || true

        # Only commit if there are staged changes
        if git diff --cached --quiet; then
          echo "No changes to commit."
        else
          git commit -m "chore: auto-process new gallery images [skip ci]"
          git push
        fi
